//=========================================================================
// Variable bit-width RISCV Core
//=========================================================================
`ifndef NIBBLER_CORE_V
`define NIBBLER_CORE_V

`include "vc-MemReqMsg.v"
`include "vc-MemRespMsg.v"

<%
from pyhplib import *
%>

module nibbler_Core
(
  input         clk,
  input         reset_l,
  input         nibbler_int,

  // Instruction Memory Request Port

  output [`VC_MEM_REQ_MSG_SZ(32,32)-1:0] imemreq_msg,
  output                                 imemreq_val,
  input                                  imemreq_rdy,

  // Instruction Memory Response Port

  input [`VC_MEM_RESP_MSG_SZ(32)-1:0] imemresp_msg,
  input                               imemresp_val,
  output                              imemresp_rdy,


  // Data Memory Request Port

 output [`VC_MEM_REQ_MSG_SZ(32,32)-1:0] dmemreq_msg,
 output                                 dmemreq_val,
 input                                  dmemreq_rdy,

  // Data Memory Response Port

 input [`VC_MEM_RESP_MSG_SZ(32)-1:0] dmemresp_msg,
 input                               dmemresp_val,
 output                              dmemresp_rdy,

  // CP0 Status Register Output to Host
  output [31:0] csr_status
);

<%
print '  localparam NIBBLER_P_NBITS = '+str(NIBBLER_P_NBITS) + ';'
print '  localparam NIBBLER_C_OFFBITS = '+str(NIBBLER_C_OFFBITS) + ';'
%>

  wire reset = !reset_l;

  wire [31:0]          imemreq_msg_addr;
  wire [31:0]          imemresp_msg_data;
  wire                 dmemreq_msg_rw;
  wire  [1:0]          dmemreq_msg_len;
  wire [31:0]          dmemreq_msg_addr;
  wire [31:0]          dmemreq_msg_data;
  wire [31:0]          dmemresp_msg_data;
  wire                 new_inst;
  wire                 pc_mux_sel_Xhl;
  wire                 pc_plus4_mux_sel_Xhl;
  wire [4:0]           rega_addr_Rhl;
  wire [4:0]           regb_addr_Rhl;
  wire [4:0]           wb_addr_Xhl;
  wire                 mem_access_Xhl;
  wire                 wb_en_Xhl;
  wire                 wb_to_temp_Xhl;

  // ALU Inputs
  `ifdef NIBBLER_VECTOR_SHIFT  
  wire                 shamt_reg_en_Xhl;
  wire                 shamt_mux_sel_Xhl;
  wire                 adj_sw_mux_sel_Xhl;
  wire                 adj_sw_reg_en_Xhl;
  wire                 a_offset_mux_sel_Rhl;
  wire                 a_offset_mux_sel_Xhl;
  wire                 wb_to_shift_Xhl;
  wire                 rf_access_dir_Xhl;
  wire                 [4:0] shamt_imm_Xhl;
  wire                 shift_inst_dir_Xhl;
  wire                 a_rd_tmp_Xhl;
  `endif

  wire                 a_mux_sel_Xhl;
<%
print '  wire ['+str(NIBBLER_P_NBITS-1)+':0]            b_imm_Xhl;'
%>
  wire                 b_mux_sel_Xhl;
  // ALU Outputs
<%
print '  wire ['+str(NIBBLER_C_OFFBITS-1)+':0]           a_subword_off_Rhl;'
print '  wire ['+str(NIBBLER_C_OFFBITS-1)+':0]           b_subword_off_Rhl;'
print '  wire ['+str(NIBBLER_C_OFFBITS-1)+':0]           wb_subword_off_Xhl;'
%>
  wire                 addsub_fn_Xhl;
  wire [1:0]           logic_fn_Xhl;
  wire [1:0]           alu_fn_type_Xhl;

  wire                 prop_flag_Xhl;
  wire                 carry_in_1_Xhl;
  wire                 flag_reg_en_Xhl;
  wire                 addr_shift_dir_sel_Xhl;
  wire                 addr_reg_en_Xhl;
  wire                 last_uop_Xhl;
  wire                 br_reg_en_Xhl;

  wire                 b_use_imm_reg_Xhl;
  wire [31:0]          proc2cop_data_Xhl;
  //----------------------------------------------------------------------
  // Pack Memory Request Messages
  //----------------------------------------------------------------------

  assign imemreq_msg = {1'b0, imemreq_msg_addr, 2'b0, 32'b0};

  assign dmemreq_msg = {dmemreq_msg_rw, dmemreq_msg_addr, dmemreq_msg_len, dmemreq_msg_data};

  //----------------------------------------------------------------------
  // Unpack Memory Response Messages
  //----------------------------------------------------------------------

  assign imemresp_msg_data = imemresp_msg[31:0];

  assign dmemresp_msg_data = dmemresp_msg[31:0];
  
  //----------------------------------------------------------------------
  // Control Unit
  //----------------------------------------------------------------------

  nibbler_Ctrl ctrl
  (
    .clk                    (clk),
    .reset                  (reset),

    // Instruction Memory Port

    .imemreq_val            (imemreq_val),
    .imemreq_rdy            (imemreq_rdy),
    .imemresp_msg_data      (imemresp_msg_data),
    .imemresp_val           (imemresp_val),
    .imemresp_rdy           (imemresp_rdy),

    // Data Memory Port

    .dmemreq_msg_rw         (dmemreq_msg_rw),
    .dmemreq_msg_len        (dmemreq_msg_len),
    .dmemreq_val            (dmemreq_val),
    .dmemreq_rdy            (dmemreq_rdy),
    .dmemresp_val           (dmemresp_val),
    .dmemresp_rdy           (dmemresp_rdy),

    .pc_mux_sel_Xhl         (pc_mux_sel_Xhl),

    .pc_plus4_mux_sel_Xhl   (pc_plus4_mux_sel_Xhl),
    .rega_addr_Rhl          (rega_addr_Rhl),
    .regb_addr_Rhl          (regb_addr_Rhl),
    .wb_addr_Xhl            (wb_addr_Xhl),
    .mem_access_Xhl         (mem_access_Xhl),
    .wb_en_Xhl              (wb_en_Xhl),

    `ifdef NIBBLER_VECTOR_SHIFT 
    .shamt_reg_en_Xhl       (shamt_reg_en_Xhl), 
    .shamt_mux_sel_Xhl      (shamt_mux_sel_Xhl), 
    .adj_sw_mux_sel_Xhl     (adj_sw_mux_sel_Xhl),
    .adj_sw_reg_en_Xhl      (adj_sw_reg_en_Xhl),
    .a_offset_mux_sel_Rhl   (a_offset_mux_sel_Rhl),
    .a_offset_mux_sel_Xhl   (a_offset_mux_sel_Xhl),
    .wb_to_shift_Xhl        (wb_to_shift_Xhl), 
    .rf_access_dir_Xhl      (rf_access_dir_Xhl),
    .shamt_imm_Xhl          (shamt_imm_Xhl),   
    .shift_inst_dir_Xhl     (shift_inst_dir_Xhl),
    .a_rd_tmp_Xhl           (a_rd_tmp_Xhl),
    `endif

    .a_mux_sel_Xhl          (a_mux_sel_Xhl),
    .b_imm_Xhl              (b_imm_Xhl),
    .b_mux_sel_Xhl          (b_mux_sel_Xhl),

    .a_subword_off_Rhl      (a_subword_off_Rhl),
    .b_subword_off_Rhl      (b_subword_off_Rhl),
    .wb_subword_off_Xhl     (wb_subword_off_Xhl),
    .addsub_fn_Xhl          (addsub_fn_Xhl),
    .logic_fn_Xhl           (logic_fn_Xhl),
    .alu_fn_type_Xhl        (alu_fn_type_Xhl),

    .prop_flag_Xhl          (prop_flag_Xhl),
    .carry_in_1_Xhl         (carry_in_1_Xhl),
    .flag_reg_en_Xhl        (flag_reg_en_Xhl),
    .addr_shift_dir_sel_Xhl (addr_shift_dir_sel_Xhl),
    .addr_reg_en_Xhl        (addr_reg_en_Xhl),
    .last_uop_Xhl           (last_uop_Xhl),
    .br_reg_en_Xhl          (br_reg_en_Xhl),

    .b_use_imm_reg_Xhl      (b_use_imm_reg_Xhl),
    .proc2cop_data_Xhl      (proc2cop_data_Xhl),

    .cp0_status             (csr_status)

  );

  //----------------------------------------------------------------------
  // Datapath
  //----------------------------------------------------------------------

  nibbler_Dpath dpath
  (
    .clk                     (clk),
    .reset                   (reset),

    // Instruction Memory Port

    .imemreq_msg_addr        (imemreq_msg_addr),

    // Data Memory Port

    .dmemreq_msg_addr        (dmemreq_msg_addr),
    .dmemreq_msg_data        (dmemreq_msg_data),
    .dmemresp_msg_data       (dmemresp_msg_data),
    .dmemresp_val_Xhl        (dmemresp_val),

    // Controls Signals (ctrl->dpath)
    .pc_mux_sel_Xhl          (pc_mux_sel_Xhl),
    .pc_plus4_mux_sel_Xhl    (pc_plus4_mux_sel_Xhl),
    .rega_addr_Rhl           (rega_addr_Rhl),
    .regb_addr_Rhl           (regb_addr_Rhl),
    .wb_addr_Xhl             (wb_addr_Xhl),
    .mem_access_Xhl          (mem_access_Xhl),
    .wb_en_Xhl               (wb_en_Xhl),

    `ifdef NIBBLER_VECTOR_SHIFT 
    .shamt_reg_en_Xhl        (shamt_reg_en_Xhl), 
    .shamt_mux_sel_Xhl       (shamt_mux_sel_Xhl),
    .adj_sw_mux_sel_Xhl      (adj_sw_mux_sel_Xhl),  
    .adj_sw_reg_en_Xhl       (adj_sw_reg_en_Xhl),
    .a_offset_mux_sel_Rhl    (a_offset_mux_sel_Rhl),
    .a_offset_mux_sel_Xhl    (a_offset_mux_sel_Xhl),      
    .wb_to_shift_Xhl         (wb_to_shift_Xhl),  
    .rf_access_dir_Xhl       (rf_access_dir_Xhl),
    .shamt_imm_Xhl           (shamt_imm_Xhl), 
    .shift_inst_dir_Xhl      (shift_inst_dir_Xhl),
    .a_rd_tmp_Xhl            (a_rd_tmp_Xhl),
    `endif

    .a_mux_sel_Xhl           (a_mux_sel_Xhl),
    .b_imm_Xhl               (b_imm_Xhl),
    .b_mux_sel_Xhl           (b_mux_sel_Xhl),

    .a_subword_off_Rhl       (a_subword_off_Rhl),
    .b_subword_off_Rhl       (b_subword_off_Rhl),
    .wb_subword_off_Xhl      (wb_subword_off_Xhl),
    .addsub_fn_Xhl           (addsub_fn_Xhl),
    .logic_fn_Xhl            (logic_fn_Xhl),
    .alu_fn_type_Xhl         (alu_fn_type_Xhl),

    .prop_flag_Xhl           (prop_flag_Xhl),
    .carry_in_1_Xhl          (carry_in_1_Xhl),
    .flag_reg_en_Xhl         (flag_reg_en_Xhl),
    .addr_shift_dir_sel_Xhl  (addr_shift_dir_sel_Xhl),
    .addr_reg_en_Xhl         (addr_reg_en_Xhl),
    .last_uop_Xhl            (last_uop_Xhl),
    .br_reg_en_Xhl           (br_reg_en_Xhl),

    .b_use_imm_reg_Xhl       (b_use_imm_reg_Xhl),
    .proc2cop_data_Xhl       (proc2cop_data_Xhl)

  );

endmodule

`endif