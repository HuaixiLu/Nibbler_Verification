
`ifndef NIBBLER_DPATH_V
`define NIBBLER_DPATH_V

module nibbler_Dpath
(

  input                  clk,
  input                  reset,

  output [31:0]          imemreq_msg_addr,

  output [31:0]          dmemreq_msg_addr,
  output [31:0]          dmemreq_msg_data, // TODO: Address this. Maybe mem accesses are vectorized somehow?
  input  [31:0]          dmemresp_msg_data,// TODO: Address this. Maybe mem accesses are vectorized somehow?
  input                  dmemresp_val_Xhl, // TODO: Address this. Maybe mem accesses are vectorized somehow?

  // ctrl -> dpath
  // --------------
  input                  pc_mux_sel_Xhl,
  input                  pc_plus4_mux_sel_Xhl,
  // Register Interface with Mem
  input   [4:0]          rega_addr_Rhl,
  input   [4:0]          regb_addr_Rhl,
  
  input   [4:0]          wb_addr_Xhl,
  input                  mem_access_Xhl, // TODO: Address this. Figure out what it was used for in dpath.
  input                  wb_en_Xhl,

  // ALU Inputs
  `ifdef NIBBLER_VECTOR_SHIFT 
  input                 shamt_reg_en_Xhl,
  input                 shamt_mux_sel_Xhl,

  input                 adj_sw_mux_sel_Xhl,
  input                 adj_sw_reg_en_Xhl,
  input                 a_offset_mux_sel_Rhl,
  input                 a_offset_mux_sel_Xhl,
  input                 wb_to_shift_Xhl,
  input                 rf_access_dir_Xhl,
  input [4:0]           shamt_imm_Xhl,
  input                 shift_inst_dir_Xhl,
  input                 a_rd_tmp_Xhl,
  `endif
  input                  a_mux_sel_Xhl,
<%
from pyhplib import *
print '  input ['+str(NIBBLER_P_NBITS-1)+':0]    b_imm_Xhl,'
%>  input                  b_mux_sel_Xhl,

<%
print '  input ['+str(NIBBLER_C_OFFBITS-1)+':0]  a_subword_off_Rhl,'
print '  input ['+str(NIBBLER_C_OFFBITS-1)+':0]  b_subword_off_Rhl,'
print '  input ['+str(NIBBLER_C_OFFBITS-1)+':0]  wb_subword_off_Xhl,'
%>
  input                  addsub_fn_Xhl,
  input [1:0]            logic_fn_Xhl,
  input [1:0]            alu_fn_type_Xhl,
  
  input                  prop_flag_Xhl,
  input                  carry_in_1_Xhl,    
  input                  flag_reg_en_Xhl,

  input                  addr_shift_dir_sel_Xhl,
  input                  addr_reg_en_Xhl,
  
  input                  last_uop_Xhl,
  input                  br_reg_en_Xhl,

  output                 b_use_imm_reg_Xhl, // Branch register indicates if branch is taken (1) or not taken (0).
  output [31:0]          proc2cop_data_Xhl

);
  
<%
print '  localparam NIBBLER_P_NBITS = '+str(NIBBLER_P_NBITS) + ';'
print '  localparam NIBBLER_C_OFFBITS = '+str(NIBBLER_C_OFFBITS) + ';'
%>

  assign dmemreq_msg_data = 32'b0;// TEMP

  //----------------
  // proc2cop logic
  // ---------------
  wire [NIBBLER_P_NBITS-1:0] alu_mux_out_Xhl;
  wire [31:0]        addr_reg_Xhl;
  assign proc2cop_data_Xhl = {alu_mux_out_Xhl, addr_reg_Xhl[31-NIBBLER_P_NBITS:0]};

  //---------------
  // All PC Logic
  //---------------

  wire [NIBBLER_P_NBITS-1:0] pc_plus4_mux_out_Xhl;
  wire [31:0]        pc;

  nibbler_PCComputation pc_logic
  (
    .clk                        (clk),
    .reset                      (reset),
    .last_uop_Xhl               (last_uop_Xhl),
    .pc_mux_sel_Xhl             (pc_mux_sel_Xhl),
    .b_use_imm_reg_Xhl          (b_use_imm_reg_Xhl),
    .alu_mux_out_Xhl            (alu_mux_out_Xhl),
    .pc_plus4_mux_sel_Xhl       (pc_plus4_mux_sel_Xhl),
    .a_mux_sel_Xhl              (a_mux_sel_Xhl),
    .addr_shift_dir_sel_Xhl     (addr_shift_dir_sel_Xhl),
    .addr_reg_en_Xhl            (addr_reg_en_Xhl),
    .pc_plus4_mux_out_Xhl       (pc_plus4_mux_out_Xhl),
    .addr_reg_Xhl               (addr_reg_Xhl),
    .pc                         (pc)
  );
  assign imemreq_msg_addr = pc;

  
  nibbler_SIMDLaneDpath lane_0
  (
    .clk                   (clk),
    .reset                 (reset),
    .rega_addr_Rhl         (rega_addr_Rhl),
    .regb_addr_Rhl         (regb_addr_Rhl),
    .wb_en_Xhl             (wb_en_Xhl),
    .wb_addr_Xhl           (wb_addr_Xhl),

    `ifdef NIBBLER_VECTOR_SHIFT 
    .shamt_reg_en_Xhl      (shamt_reg_en_Xhl), 
    .shamt_mux_sel_Xhl     (shamt_mux_sel_Xhl),
    .adj_sw_mux_sel_Xhl    (adj_sw_mux_sel_Xhl), 
    .adj_sw_reg_en_Xhl     (adj_sw_reg_en_Xhl), 
    .a_offset_mux_sel_Rhl  (a_offset_mux_sel_Rhl),
    .a_offset_mux_sel_Xhl  (a_offset_mux_sel_Xhl),
    .wb_to_shift_Xhl       (wb_to_shift_Xhl),   
    .rf_access_dir_Xhl     (rf_access_dir_Xhl),
    .shamt_imm_Xhl         (shamt_imm_Xhl),
    .shift_inst_dir_Xhl    (shift_inst_dir_Xhl),
    .a_rd_tmp_Xhl          (a_rd_tmp_Xhl),
    `endif

    .a_mux_sel_Xhl         (a_mux_sel_Xhl),
    .pc_plus4_mux_out_Xhl  (pc_plus4_mux_out_Xhl),
    .b_imm_Xhl             (b_imm_Xhl),
    .b_mux_sel_Xhl         (b_mux_sel_Xhl),

    .a_subword_off_Rhl     (a_subword_off_Rhl),
    .b_subword_off_Rhl     (b_subword_off_Rhl),
    .wb_subword_off_Xhl    (wb_subword_off_Xhl),

    .addsub_fn_Xhl         (addsub_fn_Xhl),
    .logic_fn_Xhl          (logic_fn_Xhl),
    .alu_fn_type_Xhl       (alu_fn_type_Xhl),

    .prop_flag_Xhl         (prop_flag_Xhl),
    .carry_in_1_Xhl        (carry_in_1_Xhl),
    .last_uop_Xhl          (last_uop_Xhl),
    .flag_reg_en_Xhl       (flag_reg_en_Xhl),
    .br_reg_en_Xhl         (br_reg_en_Xhl),
    .addr_reg_Xhl          (addr_reg_Xhl),

    .dmemreq_msg_addr      (dmemreq_msg_addr),
    .b_use_imm_reg_Xhl     (b_use_imm_reg_Xhl),
    .alu_mux_out_Xhl       (alu_mux_out_Xhl)
  );

endmodule
`endif